{"version":3,"sources":["server.js"],"names":["require","config","express","Message","app","cors","mongoose","process","PORT","corsOptions","origin","allowedHeaders","use","set","connect","env","MONGO_URI","useNewUrlParser","then","console","log","methods","err","key","ABLY_API_KEY","publicChannel","ably","channels","get","message","text","data","newMessage","save","error","_context","t0","req","res","messages","regeneratorRuntime","async","_context2","prev","next","awrap","find","sent","subscribe","json","status","stop","listen","port"],"mappings":"aAAAA,QAAQ,UAAUC,SAClB,IAAMC,QAAUF,QAAQ,WADxBA,SAAAA,QAAA,YAGMG,QAAUH,QAAQ,aAClBI,IAAMF,UAHNA,KAAOF,QAAU,QAKjBK,KAAOL,QAAQ,QAJfM,KAAQC,QAAGP,IAAQQ,MAAD,IAQlBC,YAAc,CAChBC,OAAQ,wBAPNN,QAAMF,CAAAA,MAAZ,QASIS,eAAgB,CAAC,iBAErBP,IAAIQ,IAAIP,KAAKI,cARbH,SAAUO,IAAGN,eAAA,GAEbD,SAAAQ,QAAAP,QAAAQ,IAAAC,UAAA,CAWIC,iBAAiB,EAVfR,oBAAc,IACkBS,KAAA,WAAA,OAAAC,QAAAC,IAAA,uBAFtC,MAGIC,SAAAA,GAAO,OAAGF,QAAOC,IAFD,4BAAAE,KAKpBlB,IAAIQ,KAASH,IAAAA,KAAAA,SAAgB,CAAAc,IAAAhB,QAAAQ,IAAAS,eAE7BC,cAAAC,KAAAC,SAAAC,IAAA,QAEAtB,cAASQ,UAAe,UAAKE,SAAWa,GAAXb,IAAAA,EAAAA,OAAAA,mBAAAA,MAAAA,SAAAA,GAAAA,OAAAA,OAAAA,EAAAA,KAAAA,EAAAA,MAAAA,KAAAA,EAAAA,OACzBC,EADoC,IAAAd,QAAA,CAAA2B,KAAAD,EAAAE,KAAAD,OAAXd,EAAAA,KAAAA,EAAAA,EAAAA,KAAAA,EAAAA,mBAAAA,MAIvBgB,EAAAC,QAJuBjB,KAAAA,EAIvBG,QAAaC,IAAP,uBAANS,EAAAE,KAAAD,MAJuBd,EAAAA,KAAAA,GAAAA,MAAAA,KAAAA,EAAAA,EAAAA,KAAAA,EAAAA,EAAAA,GAAAA,EAAAA,MAAAA,GAKnBG,QAAWe,MAAK,8BAAhBC,EAAAC,IALmBpB,KAAAA,GAAAA,IAAAA,MAAAA,OAAAA,EAAAA,SAAAA,KAAAA,KAAAA,CAAAA,CAAAA,EAAAA,OAQEZ,IAA/BwB,IAAA,YAAA,SAAAS,EAAAC,GAAA,IAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,OAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAAAJ,mBAAAK,MAiB+B1C,QAAQ2C,QAjBvC,KAAA,EAiBcP,EAjBdG,EAAAK,KAIAtB,QAAcuB,IAAAA,4BAAqBT,GAAAD,EAAAW,KAAAV,GAJnCG,EAAAE,KAAA,GAAA,MAAA,KAAA,EAAAF,EAAAC,KAAA,EAAAD,EAAAN,GAAAM,EAAA,MAAA,GAImCvB,QAAAe,MAAA,2BAAAQ,EAAAN,IAAAE,EAAAY,OAAA,KAAAD,KAAA,CAAAf,MAAA,6BAJnC,KAAA,GAAA,IAAA,MAAA,OAAAQ,EAAAS,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,OAImC/C,IAAAQ,IAAAV,QAAA+C,QAAA7C,IAAAQ,IAAAV,QAAA,OAAA,WAAAE,IAAAgD,OAAAC,KAAA,WAI3BlC,QAAAA,IAAAA,sCAAAA,OAA4CY","file":"server.min.js","sourcesContent":["require('dotenv').config();  // Load environment variables\r\nconst express = require('express');\r\nconst mongoose = require('mongoose');\r\nconst Message = require('./message'); // Assuming you have a Message model\r\nconst app = express();\r\nconst Ably = require('ably');\r\nconst cors = require('cors');\r\nconst port = process.env.PORT || 3000;  // The port should be set to 3000, where your frontend will connect\r\n\r\n// Enable CORS (Cross-Origin Resource Sharing) for your frontend domain\r\nconst corsOptions = {\r\n    origin: 'http://localhost:3000',  // Replace with the URL of your frontend\r\n    methods: ['GET', 'POST'],\r\n    allowedHeaders: ['Content-Type'],\r\n};\r\napp.use(cors(corsOptions));  // Allow cross-origin requests\r\n\r\n// Connect to MongoDB\r\nmongoose.set('strictQuery', false);\r\nmongoose.connect(process.env.MONGO_URI, { \r\n    useNewUrlParser: true, \r\n    useUnifiedTopology: true \r\n})\r\n.then(() => console.log('MongoDB connected'))\r\n.catch(err => console.log('MongoDB connection error:', err));\r\n\r\n// Initialize Ably connection\r\nconst ably = new Ably.Realtime({ key: process.env.ABLY_API_KEY });\r\nconst publicChannel = ably.channels.get('chat');\r\n\r\n// Listen for new messages on the public chat and save them to MongoDB\r\npublicChannel.subscribe('message', async (message) => {\r\n    const newMessage = new Message({ text: message.data.text });\r\n    try {\r\n        await newMessage.save();\r\n        console.log('Message saved to DB:', message.data.text);\r\n    } catch (err) {\r\n        console.error('Error saving message to DB:', err);\r\n    }\r\n});\r\n\r\n// API to get all messages from the MongoDB database\r\napp.get('/messages', async (req, res) => {\r\n    try {\r\n        const messages = await Message.find();  // Fetch all messages from MongoDB\r\n        console.log('Fetched messages from DB:', messages);  // Log messages for debugging\r\n        res.json(messages);  // Send messages as JSON response\r\n    } catch (error) {\r\n        console.error('Error fetching messages:', error);  // Log error\r\n        res.status(500).json({ error: 'Failed to fetch messages' });  // Return error if any\r\n    }\r\n});\r\n\r\n// Middleware and static file serving\r\napp.use(express.json());  // Parse incoming JSON requests\r\napp.use(express.static('public'));  // Serve static files like HTML, JS\r\n\r\n// Start server\r\napp.listen(port, () => {\r\n    console.log(`Server running on http://localhost:${port}`);  // Corrected the log message\r\n});\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"]}