{"version":3,"sources":["server.js"],"names":["require","config","express","mongoose","Message","app","Ably","cors","port","process","env","PORT","corsOptions","origin","methods","allowedHeaders","use","set","connect","MONGO_URI","useNewUrlParser","useUnifiedTopology","then","console","log","err","ably","Realtime","key","ABLY_API_KEY","publicChannel","channels","get","subscribe","message","newMessage","text","data","save","error","req","res","find","messages","json","status","listen"],"mappings":"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","sourcesContent":["require('dotenv').config();  // Load environment variables\r\nconst express = require('express');\r\nconst mongoose = require('mongoose');\r\nconst Message = require('./message'); // Assuming you have a Message model\r\nconst app = express();\r\nconst Ably = require('ably');\r\nconst cors = require('cors');\r\nconst port = process.env.PORT || 3000;  // The port should be set to 3000, where your frontend will connect\r\n\r\n// Enable CORS (Cross-Origin Resource Sharing) for your frontend domain\r\nconst corsOptions = {\r\n    origin: 'http://localhost:3000',  // Replace with the URL of your frontend\r\n    methods: ['GET', 'POST'],\r\n    allowedHeaders: ['Content-Type'],\r\n};\r\napp.use(cors(corsOptions));  // Allow cross-origin requests\r\n\r\n// Connect to MongoDB\r\nmongoose.set('strictQuery', false);\r\nmongoose.connect(process.env.MONGO_URI, { \r\n    useNewUrlParser: true, \r\n    useUnifiedTopology: true \r\n})\r\n.then(() => console.log('MongoDB connected'))\r\n.catch(err => console.log('MongoDB connection error:', err));\r\n\r\n// Initialize Ably connection\r\nconst ably = new Ably.Realtime({ key: process.env.ABLY_API_KEY });\r\nconst publicChannel = ably.channels.get('chat');\r\n\r\n// Listen for new messages on the public chat and save them to MongoDB\r\npublicChannel.subscribe('message', async (message) => {\r\n    const newMessage = new Message({ text: message.data.text });\r\n    try {\r\n        await newMessage.save();\r\n        console.log('Message saved to DB:', message.data.text);\r\n    } catch (err) {\r\n        console.error('Error saving message to DB:', err);\r\n    }\r\n});\r\n\r\n// API to get all messages from the MongoDB database\r\napp.get('/messages', async (req, res) => {\r\n    try {\r\n        const messages = await Message.find();  // Fetch all messages from MongoDB\r\n        console.log('Fetched messages from DB:', messages);  // Log messages for debugging\r\n        res.json(messages);  // Send messages as JSON response\r\n    } catch (error) {\r\n        console.error('Error fetching messages:', error);  // Log error\r\n        res.status(500).json({ error: 'Failed to fetch messages' });  // Return error if any\r\n    }\r\n});\r\n\r\n// Middleware and static file serving\r\napp.use(express.json());  // Parse incoming JSON requests\r\napp.use(express.static('public'));  // Serve static files like HTML, JS\r\n\r\n// Start server\r\napp.listen(port, () => {\r\n    console.log(`Server running on http://localhost:${port}`);  // Corrected the log message\r\n});\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"file":"server.dev.js"}